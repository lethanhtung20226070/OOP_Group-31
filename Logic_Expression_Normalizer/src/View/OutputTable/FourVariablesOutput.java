/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View.OutputTable;

import View.InputTable.FourVariablesFrm;
import Controller.BinaryComparator.MintermComparator;
import Controller.StringConverters.BooleanExpressionConverter4Variables;
import Controller.SetCover.GetCoverPIs.BooleanSimplication;
import Model.PairCombination;
import Controller.StringConverters.ChangeDataForm.PairCombinationUtils;
import Controller.CombineMinterms.ParityCheck;
import Controller.SetCover.AddX.PrimeImplicantTableCellRenderer;
import Model.Minterm;
import Model.PrimeImplicant;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class FourVariablesOutput extends javax.swing.JFrame implements ActionListener {

    private DefaultTableModel tableModel;
    private DefaultTableModel tableModel1;
    private ArrayList<Minterm> minterms;
    private FourVariablesFrm fourVariablesFrm;

    public FourVariablesOutput() {
        initComponents();
        setLocationRelativeTo(null);
        tableModel = (DefaultTableModel) tblIntermediate4Variables.getModel();
        tableModel1 = (DefaultTableModel) tblPi4Variables.getModel();
        addActionListener();
    }

    public FourVariablesOutput(FourVariablesFrm fourVariablesFrm) {
        this();
        this.fourVariablesFrm = fourVariablesFrm;
        insertValueIntoColumn();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblIntermediate4Variables = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblPi4Variables = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtFinalEquation4 = new javax.swing.JTextField();
        btnConvertAgain = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblIntermediate4Variables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Column 1", "Column 2", "Column 3", "Column 4", "Column 5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblIntermediate4Variables.setRowHeight(30);
        tblIntermediate4Variables.setRowSelectionAllowed(false);
        tblIntermediate4Variables.setShowGrid(true);
        tblIntermediate4Variables.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tblIntermediate4Variables);
        if (tblIntermediate4Variables.getColumnModel().getColumnCount() > 0) {
            tblIntermediate4Variables.getColumnModel().getColumn(0).setResizable(false);
            tblIntermediate4Variables.getColumnModel().getColumn(1).setResizable(false);
            tblIntermediate4Variables.getColumnModel().getColumn(2).setResizable(false);
            tblIntermediate4Variables.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblIntermediate4Variables.getColumnModel().getColumn(3).setResizable(false);
            tblIntermediate4Variables.getColumnModel().getColumn(3).setPreferredWidth(200);
            tblIntermediate4Variables.getColumnModel().getColumn(4).setResizable(false);
            tblIntermediate4Variables.getColumnModel().getColumn(4).setPreferredWidth(320);
        }

        tblPi4Variables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblPi4Variables.setRowHeight(30);
        tblPi4Variables.setRowSelectionAllowed(false);
        tblPi4Variables.setShowGrid(true);
        tblPi4Variables.setShowHorizontalLines(true);
        tblPi4Variables.setShowVerticalLines(true);
        tblPi4Variables.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(tblPi4Variables);
        if (tblPi4Variables.getColumnModel().getColumnCount() > 0) {
            tblPi4Variables.getColumnModel().getColumn(0).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(0).setPreferredWidth(320);
            tblPi4Variables.getColumnModel().getColumn(1).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(2).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(3).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(4).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(5).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(6).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(7).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(8).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(9).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(10).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(11).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(12).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(13).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(14).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(15).setResizable(false);
            tblPi4Variables.getColumnModel().getColumn(16).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Intermediate Table");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setText("Pi Table");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel3.setText("Final Equation :");

        txtFinalEquation4.setEditable(false);
        txtFinalEquation4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtFinalEquation4ActionPerformed(evt);
            }
        });

        btnConvertAgain.setText("Convert Again");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1058, Short.MAX_VALUE)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 803, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(32, 32, 32)
                                .addComponent(txtFinalEquation4, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnConvertAgain)
                                .addGap(96, 96, 96)))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConvertAgain)
                    .addComponent(txtFinalEquation4))
                .addGap(23, 23, 23))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFinalEquation4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtFinalEquation4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtFinalEquation4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FourVariablesOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FourVariablesOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FourVariablesOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FourVariablesOutput.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FourVariablesOutput().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConvertAgain;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblIntermediate4Variables;
    private javax.swing.JTable tblPi4Variables;
    private javax.swing.JTextField txtFinalEquation4;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();
        if (obj.equals(btnConvertAgain)) {
            FourVariablesFrm fourVariablesFrm = new FourVariablesFrm();
            fourVariablesFrm.setVisible(true);
            this.dispose();
        }
    }

    private void addActionListener() {
        btnConvertAgain.addActionListener(this);
    }

    private void insertValueIntoColumn() {
        String selectedOption = fourVariablesFrm.getSelectedOption();
        String filename = "D:\\Netbeans\\OOP\\" + (selectedOption.equals("POS") ? "POS.txt" : "SOP.txt");
        File file = new File(filename);
        if (!file.exists()) {
            System.out.println("File not found");
            return;
        }

        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String data = reader.readLine();
            minterms = new ArrayList<>();
            while (data != null) {
                Minterm minterm = createMintermFromFile(data);
                if (minterm != null) {
                    minterms.add(minterm);
                }
                data = reader.readLine();
            }
            Collections.sort(minterms, new MintermComparator());

            // Chuyển đổi minterms sang dạng PairCombination
            List<PairCombination> pairCombinations = minterms.stream()
                    .map(m -> new PairCombination(m.getMinterm(), m.getValue()))
                    .collect(Collectors.toList());

            // Kết hợp các minterm
            boolean[] isCombined = new boolean[pairCombinations.size()];
            List<PairCombination> combinedPairCombinations = ParityCheck.combineMinterms(pairCombinations, isCombined);
            List<PairCombination> newCombinedPairs = ParityCheck.combinePairCombinations(combinedPairCombinations);
            List<PairCombination> mediumCombinedPairs = ParityCheck.combinePairCombinations(newCombinedPairs);
            List<PairCombination> lastCombinedPair = ParityCheck.combinePairCombinations(mediumCombinedPairs);

            List<PairCombination> primeImplicants1 = ParityCheck.findPrimeImplicants(lastCombinedPair);
            List<PairCombination> primeImplicants2 = ParityCheck.findPrimeImplicants(mediumCombinedPairs);
            List<PairCombination> primeImplicants3 = ParityCheck.findPrimeImplicants(newCombinedPairs);
            List<PairCombination> primeImplicants4 = ParityCheck.findPrimeImplicants(combinedPairCombinations);

            List<PairCombination> primeImplicants = new ArrayList<>();
            primeImplicants.addAll(primeImplicants1);
            primeImplicants.addAll(primeImplicants2);
            primeImplicants.addAll(primeImplicants3);
            primeImplicants.addAll(primeImplicants4);

            // Điền dữ liệu vào bảng, đảm bảo mỗi cột có thể chứa số hàng cần thiết
            var max1 = Math.max(minterms.size(), combinedPairCombinations.size());
            var max2 = Math.max(newCombinedPairs.size(), mediumCombinedPairs.size());
            var max3 = Math.max(max1, max2);
            int maxRows = Math.max(lastCombinedPair.size(), max3);
            for (int i = 0; i < maxRows; i++) {
                // Nếu tableModel không đủ hàng thì thêm hàng mới
                if (i >= tableModel.getRowCount()) {
                    tableModel.addRow(new Object[]{null, null, null, null, null});
                }
                // Điền dữ liệu vào cột 1 ,cột 2,cột 3, cột 4, cột 5 nếu hàng không tồn tại giá trị thì điền khoảng trắng
                tableModel.setValueAt(i < minterms.size() ? minterms.get(i).toString() : "", i, 0);
                PairCombination pc = i < combinedPairCombinations.size() ? combinedPairCombinations.get(i) : new PairCombination("", "");
                tableModel.setValueAt(pc.getIndices() + " " + pc.getCombinedMinterm(), i, 1);
                PairCombination pc1 = i < newCombinedPairs.size() ? newCombinedPairs.get(i) : new PairCombination("", "");
                tableModel.setValueAt(pc1.getIndices() + " " + pc1.getCombinedMinterm(), i, 2);
                PairCombination pc2 = i < mediumCombinedPairs.size() ? mediumCombinedPairs.get(i) : new PairCombination("", "");
                tableModel.setValueAt(pc2.getIndices() + " " + pc2.getCombinedMinterm(), i, 3);
                PairCombination pc3 = i < lastCombinedPair.size() ? lastCombinedPair.get(i) : new PairCombination("", "");
                tableModel.setValueAt(pc3.getIndices() + " " + pc3.getCombinedMinterm(), i, 4);
            }
            insertIntoPiTable(primeImplicants);
        } catch (IOException ex) {
            Logger.getLogger(ThreeVariablesOutput.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error reading the file: " + ex.getMessage());
        }
        setCellRenderers();
        clearContentsOfFile(filename);
    }

    private Minterm createMintermFromFile(String data) {
        if (data == null || data.trim().isEmpty()) {
            return null;
        }
        String[] parts = data.split("\\s+"); // Split based on whitespace
        if (parts.length == 2) {
            return new Minterm(parts[0], parts[1]);
        }
        return null;
    }

    private void clearContentsOfFile(String filename) {
        try (FileWriter fw = new FileWriter(filename, false)) {
            // Ghi đè một chuỗi rỗng lên file, điều này sẽ làm sạch nội dung file
            fw.write("");
        } catch (IOException ex) {
            Logger.getLogger(ThreeVariablesOutput.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("Error clearing the file: " + ex.getMessage());
        }
    }

    private void setCellRenderers() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(CENTER);
        for (int i = 0; i <= 4; i++) {
            tblIntermediate4Variables.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) tblIntermediate4Variables.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(CENTER);
    }

    private void insertIntoPiTable(List<PairCombination> primeImplicants) {
        // Đảm bảo tableModel1 có đủ số lượng hàng.
        while (tableModel1.getRowCount() < primeImplicants.size()) {
            tableModel1.addRow(new Object[]{null});
        }

        // Điền giá trị vào từng hàng của tableModel1.
        for (int i = 0; i < primeImplicants.size(); i++) {
            PairCombination primeImplicant = primeImplicants.get(i);
            tableModel1.setValueAt(primeImplicant.getIndices() + " " + primeImplicant.getCombinedMinterm(), i, 0);
        }
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) tblPi4Variables.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(CENTER);
        applyPrimeImplicantRenderer(tblPi4Variables, primeImplicants);
        insertValueIntoTable(primeImplicants);
    }

    private void applyPrimeImplicantRenderer(JTable table, List<PairCombination> primeImplicants) {
        PrimeImplicantTableCellRenderer renderer = new PrimeImplicantTableCellRenderer(primeImplicants);
        table.setDefaultRenderer(Object.class, renderer);
        table.repaint(); // Đảm bảo bảng được cập nhật với dữ liệu mới
    }

    private void insertValueIntoTable(List<PairCombination> primeImplicants) {
        List<String> inputPairs = PairCombinationUtils.convertToInputPairs(primeImplicants);
        List<PrimeImplicant> parsedImplicants = PrimeImplicant.parseInputPairs(inputPairs);
        Set<Integer> allMinterms = new HashSet<>();
        parsedImplicants.forEach(pi -> allMinterms.addAll(pi.getMinterms()));
        List<PrimeImplicant> essentialPIs = BooleanSimplication.findEssentialPrimeImplicants(parsedImplicants, allMinterms);
        // Xác định các minterms chưa được phủ bởi EPIs.
        // Tạo một Set mới để lưu trữ các minterms của EPIs
        Set<Integer> mintermsOfEPIs = new HashSet<>();
        // Thêm các minterms từ mỗi EPI vào Set
        essentialPIs.forEach(epi -> mintermsOfEPIs.addAll(epi.getMinterms()));

        Set<Integer> mintermsToCover = new HashSet<>(allMinterms);
        mintermsToCover.removeAll(mintermsOfEPIs);

        // Xác định các Non-EPIs.
        List<PrimeImplicant> nonEpis = new ArrayList<>(parsedImplicants);
        nonEpis.removeAll(essentialPIs);
        // Bây giờ bạn có nonEpis và mintermsToCover, bạn có thể tìm ra phủ nhỏ nhất.
        List<PrimeImplicant> minimumNonEPIsCover = BooleanSimplication.findMinimumCoverOfNonEPIs(nonEpis, mintermsToCover, essentialPIs);
        // Kết hợp các EPIs và Non-EPIs để có được tập hợp tối giản cuối cùng
        minimumNonEPIsCover.addAll(essentialPIs);
        String minimumNonEPIsCoverText = minimumNonEPIsCover.stream()
                .map(PrimeImplicant::getImplicant)
                .collect(Collectors.joining(","));

        String selectedOption = fourVariablesFrm.getSelectedOption(); // Giả sử bạn đã có một form hoặc phương thức để lấy tùy chọn này

        // Chuyển đổi minimumNonEPIsCoverText thành mảng chuỗi để đưa vào hàm chuyển đổi
        String[] implicantsArray = minimumNonEPIsCoverText.split(",");
        String text;
        if ("POS".equals(selectedOption)) {
            text = BooleanExpressionConverter4Variables.toPOS(implicantsArray); // Giả sử đã được cập nhật để nhận mảng chuỗi
        } else {
            text = BooleanExpressionConverter4Variables.toSOP(implicantsArray); // Giả sử đã được cập nhật để nhận mảng chuỗi
        }
        // Đặt văn bản cho thành phần GUI
        txtFinalEquation4.setText(text);
    }

}
