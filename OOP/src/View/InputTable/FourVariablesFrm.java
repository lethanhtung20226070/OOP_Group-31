package View.InputTable;

import Controller.ModeClassification.POS;
import Controller.ModeClassification.SOP;
import Model.Rowfor4Variables;
import View.OutputTable.FourVariablesOutput;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author LENOVO
 */
public class FourVariablesFrm extends javax.swing.JFrame implements ActionListener {

    private DefaultTableModel tableModel;
    private ArrayList<Rowfor4Variables> rows;
    private ArrayList<SOP> sops;
    private ArrayList<POS> pos;
    private String selectedOption = null;

    /**
     * Creates new form FourVariablesFrm
     */
    public FourVariablesFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addActionListener();
        addButtonGroup();
        tableModel = (DefaultTableModel) table4Variables.getModel();
        rows = new ArrayList<Rowfor4Variables>();
        sops = new ArrayList<SOP>();
        pos = new ArrayList<POS>();
        insertValueIntoTable();
    }

    public String getSelectedOption() {
        return selectedOption;
    }

    public void setSelectedOption(String selectedOption) {
        this.selectedOption = selectedOption;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        btn3Variables = new javax.swing.JButton();
        btn4Variables = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        radioBtnPOS = new javax.swing.JRadioButton();
        radioBtnSOP = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table4Variables = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn3Variables.setText("3 Variables");
        btn3Variables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3VariablesActionPerformed(evt);
            }
        });

        btn4Variables.setText("4 Variables");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Output Type :");

        radioBtnPOS.setText("POS");

        radioBtnSOP.setText("SOP");
        radioBtnSOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBtnSOPActionPerformed(evt);
            }
        });

        table4Variables.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "A", "B", "C", "D", "0", "1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
            @Override
            public void setValueAt(Object aValue, int row, int column) {
                // Call the superclass method to ensure the value is set
                super.setValueAt(aValue, row, column);

                // If column 5 (0) was edited, update column 6 (1) to be the opposite
                if (column == 5) {
                    super.setValueAt(!(Boolean)aValue, row, 6);
                }
                // If column 5 (1) was edited, update column 4 (0) to be the opposite
                else if (column == 6) {
                    super.setValueAt(!(Boolean)aValue, row, 5);
                }
            }
        });
        table4Variables.setRowSelectionAllowed(false);
        table4Variables.setShowGrid(true);
        table4Variables.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table4Variables);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Logic Expression Normalizer");

        btnSubmit.setText("Submit");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Input :");

        jButton4.setText("Cancel");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(18, 18, 18)
                                .addComponent(btn3Variables)
                                .addGap(18, 18, 18)
                                .addComponent(btn4Variables))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioBtnPOS)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(radioBtnSOP))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 412, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSubmit)
                                .addGap(18, 18, 18)
                                .addComponent(jButton4)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(btn3Variables)
                    .addComponent(btn4Variables))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(radioBtnPOS)
                    .addComponent(radioBtnSOP))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn3VariablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3VariablesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btn3VariablesActionPerformed

    private void radioBtnSOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBtnSOPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radioBtnSOPActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FourVariablesFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FourVariablesFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FourVariablesFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FourVariablesFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FourVariablesFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn3Variables;
    private javax.swing.JButton btn4Variables;
    private javax.swing.JButton btnSubmit;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton radioBtnPOS;
    private javax.swing.JRadioButton radioBtnSOP;
    private javax.swing.JTable table4Variables;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        var obj = e.getSource();
        if (obj.equals(jButton4)) {
            this.dispose();
        } else if (obj.equals(btn3Variables)) {
            ThreeVariablesFrm threeVariablesFrm = new ThreeVariablesFrm();
            threeVariablesFrm.setVisible(true);
            this.dispose();
        } else if (obj.equals(btnSubmit)) {
            if (this.getSelectedOption() == null) {
                JOptionPane.showMessageDialog(rootPane, "Hãy chọn mode SOP hoặc POS để thấy kết quả !");
            } else {
                FourVariablesOutput fourVariablesOutput = new FourVariablesOutput(this);
                fourVariablesOutput.setVisible(true);
                this.dispose();
            }
        } else if (obj.equals(radioBtnSOP)) {
            String selected = "SOP";
            this.setSelectedOption(selected);
            sops.clear();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Boolean isSelected = (Boolean) tableModel.getValueAt(i, 6);
                if (isSelected != null && isSelected) {
                    sops.add(new SOP(i));
                }
            }
            // Kiểm tra và tạo thư mục OOP nếu chưa tồn tại
            Path sopDir = Paths.get("OOP");
            if (!Files.exists(sopDir)) {
                try {
                    Files.createDirectories(sopDir);
                    System.out.println("Đã tạo thư mục: " + sopDir.toAbsolutePath());
                } catch (IOException e1) {
                    e1.printStackTrace();
                    System.out.println("Không thể tạo thư mục: " + sopDir.toAbsolutePath());
                    return; // Ngừng nếu không thể tạo thư mục
                }
            }
            // Sử dụng đường dẫn tương đối cho SOP.txt
            Path sopFilePath = Paths.get("OOP", "SOP.txt");
            writeDataToFile1(sops, sopFilePath.toString());
        } else if (obj.equals(radioBtnPOS)) {
            String selected = "POS";
            this.setSelectedOption(selected);
            pos.clear();
            for (int i = 0; i < tableModel.getRowCount(); i++) {
                Boolean isSelected = (Boolean) tableModel.getValueAt(i, 5);
                if (isSelected != null && isSelected) {
                    pos.add(new POS(i));
                }
            }
            // Kiểm tra và tạo thư mục OOP nếu chưa tồn tại
            Path posDir = Paths.get("OOP");
            if (!Files.exists(posDir)) {
                try {
                    Files.createDirectories(posDir);
                    System.out.println("Đã tạo thư mục: " + posDir.toAbsolutePath());
                } catch (IOException e1) {
                    e1.printStackTrace();
                    System.out.println("Không thể tạo thư mục: " + posDir.toAbsolutePath());
                    return; // Ngừng nếu không thể tạo thư mục
                }
            }
            // Sử dụng đường dẫn tương đối cho POS.txt
            Path posFilePath = Paths.get("OOP", "POS.txt");
            writeDataToFile2(pos, posFilePath.toString());
        }
    }

    private void addActionListener() {
        btn3Variables.addActionListener(this);
        btn4Variables.addActionListener(this);
        btnSubmit.addActionListener(this);
        radioBtnPOS.addActionListener(this);
        radioBtnSOP.addActionListener(this);
        jButton4.addActionListener(this);
    }

    private void addButtonGroup() {
        buttonGroup1.add(radioBtnPOS);
        buttonGroup1.add(radioBtnSOP);
    }

    private void insertValueIntoTable() {
        // Initialize the table with rows for all combinations of A, B, C, D.
        for (int i = 0; i < 16; i++) {
            // Calculate the values for A, B, C, D based on the row index i.
            int columnA = (i & 0b1000) > 0 ? 1 : 0;
            int columnB = (i & 0b0100) > 0 ? 1 : 0;
            int columnC = (i & 0b0010) > 0 ? 1 : 0;
            int columnD = (i & 0b0001) > 0 ? 1 : 0;

            // Create a new Row object with initial values for column0 and column1.
            // Adjust the Row class constructor if necessary to accept columnD.
            Rowfor4Variables row = new Rowfor4Variables(i, columnA, columnB, columnC, columnD, true, false);

            // Add the Row object to the array list and the table model.
            rows.add(row);
            tableModel.addRow(new Object[]{
                row.getIndex(), row.getColumnA(), row.getColumnB(),
                row.getColumnC(), row.getColumnD(),
                row.isColumn0(), row.isColumn1()
            });
        }

        // Set the cell renderers to center.
        setCellRenderers();
    }

    private void setCellRenderers() {
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(CENTER);
        for (int i = 0; i <= 4; i++) {
            table4Variables.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }
        DefaultTableCellRenderer headerRenderer = (DefaultTableCellRenderer) table4Variables.getTableHeader().getDefaultRenderer();
        headerRenderer.setHorizontalAlignment(CENTER);
    }

    private void writeDataToFile1(List<SOP> data, String fileName) {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {
            for (SOP sop : data) {
                writer.write(sop.toStringFour());
                writer.newLine();
            }
            System.out.println("Đã ghi vào tệp: " + fileName);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error writing to file: " + fileName);
            System.out.println("Exception message: " + e.getMessage());
        }
    }

    private void writeDataToFile2(List<POS> data, String fileName) {
        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {
            for (POS pos : data) {
                writer.write(pos.toStringFour());
                writer.newLine();
            }
            System.out.println("Đã ghi vào tệp: " + fileName);
        } catch (IOException e) {
            e.printStackTrace();
            System.out.println("Error writing to file: " + fileName);
            System.out.println("Exception message: " + e.getMessage());
        }
    }

}
